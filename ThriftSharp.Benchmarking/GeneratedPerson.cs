/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class GeneratedPerson : TBase
{
  private List<string> _MiddleNames;
  private int _Age;
  private string _Description;

  public string FirstName { get; set; }

  public List<string> MiddleNames
  {
    get
    {
      return _MiddleNames;
    }
    set
    {
      __isset.MiddleNames = true;
      this._MiddleNames = value;
    }
  }

  public string LastName { get; set; }

  public int Age
  {
    get
    {
      return _Age;
    }
    set
    {
      __isset.Age = true;
      this._Age = value;
    }
  }

  public bool IsAlive { get; set; }

  public List<GeneratedHobby> Hobbies { get; set; }

  public string Description
  {
    get
    {
      return _Description;
    }
    set
    {
      __isset.Description = true;
      this._Description = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool MiddleNames;
    public bool Age;
    public bool Description;
  }

  public GeneratedPerson() {
  }

  public GeneratedPerson(string FirstName, string LastName, bool IsAlive, List<GeneratedHobby> Hobbies) : this() {
    this.FirstName = FirstName;
    this.LastName = LastName;
    this.IsAlive = IsAlive;
    this.Hobbies = Hobbies;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_FirstName = false;
    bool isset_LastName = false;
    bool isset_IsAlive = false;
    bool isset_Hobbies = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            FirstName = iprot.ReadString();
            isset_FirstName = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.List) {
            {
              MiddleNames = new List<string>();
              TList _list0 = iprot.ReadListBegin();
              for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
              {
                string _elem2 = null;
                _elem2 = iprot.ReadString();
                MiddleNames.Add(_elem2);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            LastName = iprot.ReadString();
            isset_LastName = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Age = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.Bool) {
            IsAlive = iprot.ReadBool();
            isset_IsAlive = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.List) {
            {
              Hobbies = new List<GeneratedHobby>();
              TList _list3 = iprot.ReadListBegin();
              for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
              {
                GeneratedHobby _elem5 = (GeneratedHobby)0;
                _elem5 = (GeneratedHobby)iprot.ReadI32();
                Hobbies.Add(_elem5);
              }
              iprot.ReadListEnd();
            }
            isset_Hobbies = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.String) {
            Description = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_FirstName)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_LastName)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_IsAlive)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_Hobbies)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("GeneratedPerson");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "FirstName";
    field.Type = TType.String;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(FirstName);
    oprot.WriteFieldEnd();
    if (MiddleNames != null && __isset.MiddleNames) {
      field.Name = "MiddleNames";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, MiddleNames.Count));
        foreach (string _iter6 in MiddleNames)
        {
          oprot.WriteString(_iter6);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    field.Name = "LastName";
    field.Type = TType.String;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(LastName);
    oprot.WriteFieldEnd();
    if (__isset.Age) {
      field.Name = "Age";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Age);
      oprot.WriteFieldEnd();
    }
    field.Name = "IsAlive";
    field.Type = TType.Bool;
    field.ID = 5;
    oprot.WriteFieldBegin(field);
    oprot.WriteBool(IsAlive);
    oprot.WriteFieldEnd();
    field.Name = "Hobbies";
    field.Type = TType.List;
    field.ID = 6;
    oprot.WriteFieldBegin(field);
    {
      oprot.WriteListBegin(new TList(TType.I32, Hobbies.Count));
      foreach (GeneratedHobby _iter7 in Hobbies)
      {
        oprot.WriteI32((int)_iter7);
      }
      oprot.WriteListEnd();
    }
    oprot.WriteFieldEnd();
    if (Description != null && __isset.Description) {
      field.Name = "Description";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Description);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("GeneratedPerson(");
    sb.Append("FirstName: ");
    sb.Append(FirstName);
    sb.Append(",MiddleNames: ");
    sb.Append(MiddleNames);
    sb.Append(",LastName: ");
    sb.Append(LastName);
    sb.Append(",Age: ");
    sb.Append(Age);
    sb.Append(",IsAlive: ");
    sb.Append(IsAlive);
    sb.Append(",Hobbies: ");
    sb.Append(Hobbies);
    sb.Append(",Description: ");
    sb.Append(Description);
    sb.Append(")");
    return sb.ToString();
  }

}

