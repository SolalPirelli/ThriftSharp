/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftSharp.Benchmarking.Models.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AllTypesContainer : TBase
  {

    public bool Value1 { get; set; }

    public sbyte Value2 { get; set; }

    public double Value3 { get; set; }

    public short Value4 { get; set; }

    public int Value5 { get; set; }

    public long Value6 { get; set; }

    public byte[] Value7 { get; set; }

    public string Value8 { get; set; }

    public EmptyStruct Value9 { get; set; }

    public Dictionary<int, int> Value10 { get; set; }

    public THashSet<int> Value11 { get; set; }

    public List<int> Value12 { get; set; }

    public AllTypesContainer() {
    }

    public AllTypesContainer(bool value1, sbyte value2, double value3, short value4, int value5, long value6, byte[] value7, string value8, EmptyStruct value9, Dictionary<int, int> value10, THashSet<int> value11, List<int> value12) : this() {
      this.Value1 = value1;
      this.Value2 = value2;
      this.Value3 = value3;
      this.Value4 = value4;
      this.Value5 = value5;
      this.Value6 = value6;
      this.Value7 = value7;
      this.Value8 = value8;
      this.Value9 = value9;
      this.Value10 = value10;
      this.Value11 = value11;
      this.Value12 = value12;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_value1 = false;
      bool isset_value2 = false;
      bool isset_value3 = false;
      bool isset_value4 = false;
      bool isset_value5 = false;
      bool isset_value6 = false;
      bool isset_value7 = false;
      bool isset_value8 = false;
      bool isset_value9 = false;
      bool isset_value10 = false;
      bool isset_value11 = false;
      bool isset_value12 = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Value1 = iprot.ReadBool();
              isset_value1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Value2 = iprot.ReadByte();
              isset_value2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Value3 = iprot.ReadDouble();
              isset_value3 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Value4 = iprot.ReadI16();
              isset_value4 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Value5 = iprot.ReadI32();
              isset_value5 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Value6 = iprot.ReadI64();
              isset_value6 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Value7 = iprot.ReadBinary();
              isset_value7 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Value8 = iprot.ReadString();
              isset_value8 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Value9 = new EmptyStruct();
              Value9.Read(iprot);
              isset_value9 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                Value10 = new Dictionary<int, int>();
                TMap _map25 = iprot.ReadMapBegin();
                for( int _i26 = 0; _i26 < _map25.Count; ++_i26)
                {
                  int _key27;
                  int _val28;
                  _key27 = iprot.ReadI32();
                  _val28 = iprot.ReadI32();
                  Value10[_key27] = _val28;
                }
                iprot.ReadMapEnd();
              }
              isset_value10 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Set) {
              {
                Value11 = new THashSet<int>();
                TSet _set29 = iprot.ReadSetBegin();
                for( int _i30 = 0; _i30 < _set29.Count; ++_i30)
                {
                  int _elem31;
                  _elem31 = iprot.ReadI32();
                  Value11.Add(_elem31);
                }
                iprot.ReadSetEnd();
              }
              isset_value11 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Value12 = new List<int>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  int _elem34;
                  _elem34 = iprot.ReadI32();
                  Value12.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
              isset_value12 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_value1)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value2)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value3)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value4)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value5)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value6)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value7)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value8)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value9)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value10)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value11)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_value12)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AllTypesContainer");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "value1";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Value1);
      oprot.WriteFieldEnd();
      field.Name = "value2";
      field.Type = TType.Byte;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Value2);
      oprot.WriteFieldEnd();
      field.Name = "value3";
      field.Type = TType.Double;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Value3);
      oprot.WriteFieldEnd();
      field.Name = "value4";
      field.Type = TType.I16;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI16(Value4);
      oprot.WriteFieldEnd();
      field.Name = "value5";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Value5);
      oprot.WriteFieldEnd();
      field.Name = "value6";
      field.Type = TType.I64;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Value6);
      oprot.WriteFieldEnd();
      field.Name = "value7";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Value7);
      oprot.WriteFieldEnd();
      field.Name = "value8";
      field.Type = TType.String;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Value8);
      oprot.WriteFieldEnd();
      field.Name = "value9";
      field.Type = TType.Struct;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      Value9.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "value10";
      field.Type = TType.Map;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Value10.Count));
        foreach (int _iter35 in Value10.Keys)
        {
          oprot.WriteI32(_iter35);
          oprot.WriteI32(Value10[_iter35]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "value11";
      field.Type = TType.Set;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteSetBegin(new TSet(TType.I32, Value11.Count));
        foreach (int _iter36 in Value11)
        {
          oprot.WriteI32(_iter36);
        }
        oprot.WriteSetEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "value12";
      field.Type = TType.List;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, Value12.Count));
        foreach (int _iter37 in Value12)
        {
          oprot.WriteI32(_iter37);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AllTypesContainer(");
      __sb.Append(", Value1: ");
      __sb.Append(Value1);
      __sb.Append(", Value2: ");
      __sb.Append(Value2);
      __sb.Append(", Value3: ");
      __sb.Append(Value3);
      __sb.Append(", Value4: ");
      __sb.Append(Value4);
      __sb.Append(", Value5: ");
      __sb.Append(Value5);
      __sb.Append(", Value6: ");
      __sb.Append(Value6);
      __sb.Append(", Value7: ");
      __sb.Append(Value7);
      __sb.Append(", Value8: ");
      __sb.Append(Value8);
      __sb.Append(", Value9: ");
      __sb.Append(Value9== null ? "<null>" : Value9.ToString());
      __sb.Append(", Value10: ");
      __sb.Append(Value10);
      __sb.Append(", Value11: ");
      __sb.Append(Value11);
      __sb.Append(", Value12: ");
      __sb.Append(Value12);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
