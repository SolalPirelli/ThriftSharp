/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftSharp.Benchmarking.Models.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PersonAvailability : TBase
  {

    public Person Person { get; set; }

    public List<TimePeriod> Periods { get; set; }

    public PersonAvailability() {
    }

    public PersonAvailability(Person person, List<TimePeriod> periods) : this() {
      this.Person = person;
      this.Periods = periods;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_person = false;
      bool isset_periods = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Person = new Person();
              Person.Read(iprot);
              isset_person = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Periods = new List<TimePeriod>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  TimePeriod _elem23;
                  _elem23 = new TimePeriod();
                  _elem23.Read(iprot);
                  Periods.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
              isset_periods = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_person)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_periods)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PersonAvailability");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "person";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Person.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "periods";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Periods.Count));
        foreach (TimePeriod _iter24 in Periods)
        {
          _iter24.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PersonAvailability(");
      __sb.Append(", Person: ");
      __sb.Append(Person== null ? "<null>" : Person.ToString());
      __sb.Append(", Periods: ");
      __sb.Append(Periods);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
