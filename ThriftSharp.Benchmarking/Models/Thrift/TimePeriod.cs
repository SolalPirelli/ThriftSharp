/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftSharp.Benchmarking.Models.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TimePeriod : TBase
  {

    public long From { get; set; }

    public long To { get; set; }

    public bool Available { get; set; }

    public TimePeriod() {
    }

    public TimePeriod(long from, long to, bool available) : this() {
      this.From = from;
      this.To = to;
      this.Available = available;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_from = false;
      bool isset_to = false;
      bool isset_available = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              From = iprot.ReadI64();
              isset_from = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              To = iprot.ReadI64();
              isset_to = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Available = iprot.ReadBool();
              isset_available = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_from)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_to)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_available)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TimePeriod");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "from";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(From);
      oprot.WriteFieldEnd();
      field.Name = "to";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(To);
      oprot.WriteFieldEnd();
      field.Name = "available";
      field.Type = TType.Bool;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Available);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TimePeriod(");
      __sb.Append(", From: ");
      __sb.Append(From);
      __sb.Append(", To: ");
      __sb.Append(To);
      __sb.Append(", Available: ");
      __sb.Append(Available);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
